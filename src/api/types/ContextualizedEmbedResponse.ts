/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface ContextualizedEmbedResponse {
    /** The object type, which is always "contextualized_embeddings". */
    object?: string;
    /** An array of contextualized embedding results, one for each input document. */
    data?: ContextualizedEmbedResponse.Data.Item[];
    /** Name of the model used. */
    model?: string;
    usage?: ContextualizedEmbedResponse.Usage;
}

export namespace ContextualizedEmbedResponse {
    export type Data = Data.Item[];

    export namespace Data {
        export interface Item {
            /** An array of embeddings for each chunk in the document. */
            embeddings?: Item.Embeddings.Item[];
            /** The index of this document within the input list. */
            document_index?: number;
        }

        export namespace Item {
            export type Embeddings = Embeddings.Item[];

            export namespace Embeddings {
                export interface Item {
                    /** The object type, which is always "embedding". */
                    object?: string;
                    /** The contextualized embedding vector for this chunk, represented as an array of numbers. The data type depends on the `output_dtype` parameter: floating-point numbers for `float`, integers for `int8`, `uint8`, `binary`, and `ubinary`. */
                    embedding?: number[];
                    /** The index of this chunk within the document. */
                    index?: number;
                }
            }
        }
    }

    export interface Usage {
        /** The total number of tokens used for computing the contextualized embeddings. */
        total_tokens?: number;
    }
}
