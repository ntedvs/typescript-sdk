/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { VoyageAIClient } from "../../src/Client";

describe("VoyageAIClient", () => {
    test("embed", async () => {
        const server = mockServerPool.createServer();
        const client = new VoyageAIClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { input: "input", model: "model" };
        const rawResponseBody = {
            object: "object",
            data: [{ object: "object", embedding: [1.1], index: 1 }],
            model: "model",
            usage: { total_tokens: 1 },
        };
        server
            .mockEndpoint()
            .post("/embeddings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.embed({
            input: "input",
            model: "model",
        });
        expect(response).toEqual({
            object: "object",
            data: [
                {
                    object: "object",
                    embedding: [1.1],
                    index: 1,
                },
            ],
            model: "model",
            usage: {
                total_tokens: 1,
            },
        });
    });

    test("rerank", async () => {
        const server = mockServerPool.createServer();
        const client = new VoyageAIClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { query: "query", documents: ["documents"], model: "model" };
        const rawResponseBody = {
            object: "object",
            data: [{ index: 1, relevance_score: 1.1, document: "document" }],
            model: "model",
            usage: { total_tokens: 1 },
        };
        server
            .mockEndpoint()
            .post("/rerank")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.rerank({
            query: "query",
            documents: ["documents"],
            model: "model",
        });
        expect(response).toEqual({
            object: "object",
            data: [
                {
                    index: 1,
                    relevance_score: 1.1,
                    document: "document",
                },
            ],
            model: "model",
            usage: {
                total_tokens: 1,
            },
        });
    });

    test("multimodal-embed", async () => {
        const server = mockServerPool.createServer();
        const client = new VoyageAIClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { inputs: [{}], model: "model" };
        const rawResponseBody = {
            object: "object",
            data: [{ object: "object", embedding: [1.1], index: 1 }],
            model: "model",
            usage: { total_tokens: 1 },
        };
        server
            .mockEndpoint()
            .post("/multimodalembeddings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.multimodalEmbed({
            inputs: [{}],
            model: "model",
        });
        expect(response).toEqual({
            object: "object",
            data: [
                {
                    object: "object",
                    embedding: [1.1],
                    index: 1,
                },
            ],
            model: "model",
            usage: {
                total_tokens: 1,
            },
        });
    });

    test("contextualized-embed", async () => {
        const server = mockServerPool.createServer();
        const client = new VoyageAIClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { inputs: [["inputs"]], model: "model" };
        const rawResponseBody = {
            object: "object",
            data: [{ embeddings: [{}], document_index: 1 }],
            model: "model",
            usage: { total_tokens: 1 },
        };
        server
            .mockEndpoint()
            .post("/contextualizedembeddings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.contextualizedEmbed({
            inputs: [["inputs"]],
            model: "model",
        });
        expect(response).toEqual({
            object: "object",
            data: [
                {
                    embeddings: [{}],
                    document_index: 1,
                },
            ],
            model: "model",
            usage: {
                total_tokens: 1,
            },
        });
    });
});
